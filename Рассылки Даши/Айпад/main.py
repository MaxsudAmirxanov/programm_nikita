from pyrogram import Client
from pyrogram.types import User
import random
import asyncio
import datetime
from time import sleep

#–ù–∞—à –∫–æ–ø–∏—Ä–∞–π—Ç
# text = {1: "—Ç–µ—Å—Ç1", 2: "test2", 3: "test3"}
text = """–ø—Ä–∏–≤–µ—Ç, –º–µ–Ω—è –∑–æ–≤—É—Ç –ù–∏–∫–∏—Ç–∞, —è —É–∂–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ª–µ—Ç "–∂–∏–≤—É" –Ω–∞ —Ñ—Ä–∏–ª–∞–Ω—Å–µ. üòÖ

–ó–∞–Ω–∏–º–∞—é—Å—å –≤–µ–±-–¥–∏–∑–∞–π–Ω–æ–º –∏ —Å–µ–π—á–∞—Å –ø–æ–º–æ–≥–∞—é –Ω–∞—á–∏–Ω–∞—é—â–∏–º –≤–µ–±-–¥–∏–∑–∞–π–Ω–µ—Ä–∞–º –≤—ã–π—Ç–∏ –Ω–∞ —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥ –æ—Ç 50 000‚ÇΩ/–º–µ—Å—è—Ü, –¥–µ–π—Å—Ç–≤—É—é—â–∏–º ‚Äî –ø–ª–æ—Ç–Ω–æ –∑–∞–∫—Ä–µ–ø–∏—Ç—å—Å—è –Ω–∞ —Ä—ã–Ω–∫–µ –∏ –ø—Ä–æ–±–∏—Ç—å –ø–ª–∞–Ω–∫—É –≤ 200–∫ –∑–∞ —Å—á—ë—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∑–Ω–∞–Ω–∏–π –∏ –ø—Ä–∞–∫—Ç–∏–∫–∏ –≤ —Ç—Ä–µ–Ω–¥–æ–≤–æ–º –¥–∏–∑–∞–π–Ω–µ, –≤—ã—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏–∏ —Ç–≤—ë—Ä–¥–æ–≥–æ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –ø—Ä–æ–∫–∞—á–∫–∏ –Ω–∞–≤—ã–∫–∞ –ø—Ä–æ–¥–∞–∂. 

–°–≤–æ–µ–≥–æ –ø–µ—Ä–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ —è –∑–∞–∫—Ä—ã–ª –Ω–∞ —Å–∞–π—Ç –∑–∞ 130 —Ç—ã—Å—è—á —Ä—É–±–ª–µ–π, –∞ —Å–µ–π—á–∞—Å —Ä–∞–±–æ—Ç–∞—é —Å —Ç–æ–ø–∞–º–∏ —Ä—ã–Ω–∫–∞ –∏–Ω—Ñ–æ–±–∏–∑–∞ (–ú–∏—Ç—Ä–æ—à–∏–Ω–∞, –°—Ç–∞—à–∫–µ–≤–∏—á, –¢–∏–º–æ—á–∫–æ, –•–µ–ª–ª–∏ –§–æ–∫—Å–∏) –∏ —Ö–æ—á—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ç–µ–±–µ –Ω–µ–±–æ–ª—å—à—É—é –ë–ï–°–ü–õ–ê–¢–ù–£–Æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é üî•

–û—Ç —Ç–µ–±—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –±—É–¥–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–≤–æ—ë –≤–Ω–∏–º–∞–Ω–∏–µ –∏ –¥–æ–≤–µ—Ä–∏–µ, —è –ø–æ–≥—Ä—É–∂—É—Å—å –≤ —Ç–≤–æ—é —Ç–µ–∫—É—â—É—é —Å–∏—Ç—É–∞—Ü–∏—é –∏ –¥–∞–º –ø–∞—Ä—É —Å–æ–≤–µ—Ç–æ–≤, –∫–∞–∫ —Å–µ–π—á–∞—Å –≤—ã–π—Ç–∏ –Ω–∞ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–æ—Ö–æ–¥–∞. 

–ë—ã–ª–æ –±—ã –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ —Å–æ–∑–≤–æ–Ω–∏—Ç—å—Å—è –Ω–∞ 20-30 –º–∏–Ω—É—Ç–æ–∫? """

#14460056
api_id=12566967
api_hash="8151e12ef5201646c9932a206b7dc614"


app = Client("me", api_id, api_hash )

async def main(v, choice_2, file_name, second):
    '–†–∞—Å—Å—ã–ª–∫–∞, –ø–æ –±–∞–∑–µ'
    async with app:

        number_r = random.randint(1,4)
        new_v = v.split('\n')

        index = 0
        for i in new_v:
            if i == '':
                continue
            print(i)
            index += 1
            if index == 1:
                if choice_2 == '3':
                    '–†–∞—Å—Å—ã–ª–∫–∞ —Ç–µ—Å—Ç–æ–º'
                    first_name = (await app.get_users(i)).first_name
                    sleep(second)
                    await app.send_message(i, f"{first_name} {text}")
                    break

                elif choice_2 == '2':
                    '–†–∞—Å—Å—ã–ª–∫–∞ —Å –∫—Ä—É–∂–æ—á–∫–∞–º–∏'
                    sleep(second)
                    # await app.send_message(i, f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é " + (await app.get_users(i)).first_name)
                    await app.send_video_note(i, f"data\{file_name}.mp4")
                    break

                elif choice_2 == '1':
                    '–†–∞—Å—Å—ã–ª–∫–∞ —Å –≥—Å'
                    sleep(second)
                    await app.send_audio(i, f"data\{file_name}.ogg")
                    break


async def compiler_chat(chat, file_name):
    "–ö–æ–º–ø–∏–ª—è—Ç–æ—Ä —á–∞—Ç–æ–≤"
    await app.start()
    async for user in app.iter_chat_members((await app.get_chat(chat)).id):
        
        timestamp = user.user.last_online_date

        try:
            value = datetime.datetime.fromtimestamp(timestamp)
        except TypeError:
            with open(f'data_for_user/{file_name}.txt', 'a', encoding='utf-8') as file:
                file.write(f"{user.user.username}\n")
                continue



        with open(f'data_for_user/{file_name}.txt', 'a', encoding='utf-8') as file:
            if value.strftime('%Y-%m-%d') == f'2022-03-22' or value.strftime('%Y-%m-%d') == f'2022-03-23' or value.strftime('%Y-%m-%d') == f'2022-03-24' or value.strftime('%Y-%m-%d') == f'2022-03-25' or value.strftime('%Y-%m-%d') == f'2022-03-26':
                file.write(f"{user.user.username}\n")

            else:
                print(f"–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª –∑–∞—Ö–æ–¥–∏–ª - {value.strftime('%Y-%m-%d %H:%M:%S')} - {user.user.username}")
            


def spam(data_base):
    number = 0
    choice_1 = int(input("–°–∫–æ–ª—å–∫–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ? "))
    choice_2 = input('''
        1) –†–∞—Å—Å—ã–ª–∫–∞ —Å –≥—Å
        2) –†–∞—Å—Å—ã–ª–∫–∞ —Å –∫—Ä—É–∂–æ—á–∫–∞–º–∏
        3) –†–∞—Å—Å—ã–ª–∫–∞ —Ç–µ—Å—Ç–æ–º
        ''')
    second = int(input('–í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–µ—Ä–∂–∫—É –≤ —Å–µ–∫—É–Ω–¥–∞—Ö: '))
    if choice_2 == '2':
        file_name = '–ù–∏–∫–∏—Ç–∞_–∫—Ä—É–∂–æ—á–µ–∫'

    elif choice_2 == '1':
        file_name = '–ù–∏–∫–∏—Ç–∞_–≥—Å'
    elif choice_2 == '3':
        file_name = '–ü—É—Å—Ç–æ'

    for v in open(f"data_for_user/{data_base}.txt", "r"):
        number += 1

        app.run(main(v, choice_2, file_name, second))
        if choice_1 == number:
            
    
            #–£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫ ID, –∫–æ—Ç–æ—Ä—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–æ—Å—å
            with open(f"data_for_user/{data_base}.txt", 'r') as f:
                lines = f.readlines()

            with open(f"data_for_user/{data_base}.txt", 'w') as f:
                f.writelines(lines[choice_1:])
            break



print('''
1) –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –ø–æ –±–∞–∑–µ 
2) –°–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–∞—Ç–∞
''')
choice = input("–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å? ")

if choice == '1':
    data_base = input('–í–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ (.txt —É–∫–∞–∑—ã–≤–∞–µ—å –Ω–µ –Ω–∞–¥–æ): \n')
    

    spam(data_base)

elif choice == '2':
    chat = input('–í–≤–µ–¥–∏—Ç–µ @ —á–∞—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞—Ç—å: \n')
    file_name = input('–í–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞: \n')
    asyncio.run(compiler_chat(chat, file_name))